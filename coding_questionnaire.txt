{
"project\_name": "KitePilot — Single-User NSE ML Intraday Trader",
"project\_type": "ml\_system",
"one\_line\_pitch": "A configurable, end-to-end Zerodha-Kite–powered intraday equities trading bot with research, backtesting, live execution, risk controls, and auditability.",
"primary\_users": "Single self-directed trader.\nTop jobs-to-be-done:\n1) Research & validate ML strategies on historical and live data.\n2) Execute intraday trades automatically within strict risk limits.\n3) Monitor performance, diagnose issues, and iterate fast.",
"core\_use\_cases": "- Live market data ingest (Kite WebSocket) and 1s/1m bar aggregation\n- Signal generation via pluggable ML models (XGBoost/LightGBM/PyTorch)\n- Risk engine: daily loss cap, exposure/position caps, circuit/freeze checks\n- Order routing to Zerodha (place/modify/cancel) with postback reconciliation\n- Research/backtesting with walk-forward training & fee/slippage modeling",
"non\_goals": "High-frequency trading/colocation; multi-tenant portfolio management; overnight positions; derivatives; social copy-trading.",
"success\_metrics": "Live mode: daily drawdown never exceeds configured cap; zero unhandled errors during market hours; p95 tick→signal latency < 50 ms; p95 signal→order < 100 ms (ex-broker). Backtests: out-of-sample Sharpe > 1.2 with fees; slippage model error MAE < 20%. Operational: <1 missed postback per week; full audit trail for 100% of orders.",
"timeline\_milestones": "MVP (paper): 2025-09-30 — live market data, paper fills, dashboards, basic risk gates.\nBeta (limited live): 2025-10-31 — live orders with strict limits, two strategies, daily packs.\nGA (personal): 2025-12-15 — polished UI, runbooks, walk-forward automation, model registry.",
"budget\_constraints": "Keep monthly infra under ₹6,000 for MVP (small EC2 or DO droplet + managed Postgres). Kite Connect subscription as required. Prefer open-source components (Grafana/Prometheus) over paid APM initially.",
"competitive\_refs": "Streak (retail strategy builder), QuantConnect/Lean (research/backtest engine), AlgoTest (options-focused) — used only as UX references; this is single-user and broker-native.",

"ui\_platforms": \["web","desktop\_linux","desktop\_windows"],
"design\_language": \["shadcn/ui","radix\_primitives","tailwindcss"],
"branding\_assets": null,
"accessibility\_level": "wcag\_2.1\_aa",
"localization": "en-IN primary; i18n ready via message catalogs; date/time in Asia/Kolkata.",

"frontend\_language": "typescript\_nextjs",
"backend\_language": "python\_fastapi",
"runtime\_version\_pins": "Python 3.11; Node 20; Postgres 16; Redis 7",
"package\_manager": \["pnpm","pip","poetry"],
"monorepo\_vs\_polyrepo": "monorepo",
"build\_tooling": \["turbo","vite","esbuild"],

"data\_store": \["postgres","redis","clickhouse"],
"orm\_or\_query": \["sqlalchemy","none/raw\_sql"],
"caching": \["redis","in\_memory"],
"search\_index": \["none"],
"message\_queue": \["nats"],
"object\_storage": \["s3","local\_fs\_dev\_only"],
"data\_model\_outline": "Core entities:\n- Instrument(id, symbol, exchange, tick\_size, lot/freeze\_qty, sector)\n- Candle(id, instrument\_id, interval, ts, ohlcv, adjusted)\n- Tick(id, instrument\_id, ts, last\_price, bid/ask, depth\_json)\n- FeatureVector(id, instrument\_id, ts, horizon, features\_json, version)\n- Model(id, name, version, params\_json, metrics\_json, artifact\_uri, created\_at)\n- Signal(id, instrument\_id, ts, horizon, side, confidence, target\_bps, features\_ref, model\_ref)\n- OrderIntent(id, signal\_id, instrument\_id, side, qty, price, type, status, idempotency\_key)\n- Order(id, broker\_order\_id, intent\_id, payload\_json, state, created\_at, updated\_at)\n- Fill(id, order\_id, ts, qty, price, fees\_json)\n- Position(id, instrument\_id, qty, avg\_price, unrealized\_pnl, realized\_pnl)\n- RiskLimitProfile(id, caps\_json, active\_from)\n- Run(id, mode, config\_hash, started\_at, stopped\_at)\n- AuditEvent(id, ts, run\_id, kind, payload\_json)\nRelationships: Instrument 1-\* Candle/Tick/FeatureVector/Signal/Order/Position; Order 1-\* Fill; Signal 1-1 OrderIntent; OrderIntent 1-1→\* Order; Run 1-\* AuditEvent.",
"data\_retention": "Ticks 30 days hot (ClickHouse), candles/features 18 months, orders/fills/audit indefinitely (Postgres). Right-to-erasure not applicable (no external users). Daily S3 snapshots; monthly glacier tiering.",
"seed\_sample\_data": true,

"api\_style": \["rest","webhooks","websockets/sse"],
"api\_endpoints\_list": "- REST\n  - GET /health, GET /status\n  - GET /instruments, GET /candles?symbol\&interval\&from\&to\n  - GET /positions, GET /orders, GET /fills\n  - POST /config/reload, POST /trading/start, POST /trading/stop, POST /flatten\n  - POST /signals: backtest or live preview on uploaded data\n  - GET /metrics: Prometheus scrape\n- Webhooks\n  - POST /broker/postbacks: Kite order/update events\n- WebSocket/SSE\n  - /live: stream P\&L, exposure, order events, alerts",
"external\_integrations": "Zerodha Kite Connect (market data & orders); optional: Slack incoming webhook for alerts; NTP pool for clock sync.",
"rate\_limits": "Client-side token bucket for REST; max N orders/sec with headroom; burst and minute windows; backoff/jitter on 429; circuit breaker when repeated errors.",
"api\_contracts": true,

"auth\_method": \["email\_password","session\_cookies","mfa/2fa","jwt"],
"roles\_permissions": "Single user: Owner role with full access. Internal service role for postbacks/metrics. Future-proof RBAC scaffolding (roles: Owner, ReadOnly, Operator).",
"security\_requirements": "PII-light; comply with broker T\&Cs and SEBI retail-algo framework. Encrypt secrets at rest; TLS everywhere; signed container images. Daily audit export.",
"secrets\_management": "aws\_secrets\_manager",
"privacy\_notes": "No third-party sharing. Only store broker user ID masked; never store OTPs. Minimize personal data to email + display name.",

"perf\_targets": "Web LCP < 2.0s on 3G Fast; API p95 < 120 ms for reads, < 200 ms for POST /signals; live loop tick→signal p95 < 50 ms; signal→order enqueue < 20 ms.",
"scalability\_needs": "Single user, watchlist 50–300 instruments; peak tick throughput up to 5–10k msg/s; ClickHouse sized for 1.5 years of 1-second bars.",
"offline\_mode": false,
"realtime\_features": "Live P\&L/exposure; order/fill stream; alert banners; model-drift & postback-lag indicators.",
"idempotency\_tx": "Idempotency keys on OrderIntent -> Order mapping; dedupe on retries; exactly-once audit append.",

"hosting\_target": \["aws\_ecs","digitalocean","bare\_metal"],
"containerization": "docker",
"ci\_provider": "github\_actions",
"ci\_checks": \["lint","typecheck","unit\_tests","integration\_tests","e2e\_tests","build","vulnerability\_scan","format\_check","license\_check"],
"cd\_strategy": "manual\_promote",
"observability": "OTel traces/metrics; Prometheus + Grafana; Loki for logs; alert rules for WS disconnects, postback lag, risk breaches, error spikes.",
"error\_reporting": "Sentry (backend & UI) with alerts to Slack/email.",
"environments": "Local (docker-compose), Dev (single node), Staging (paper trading), Prod (live). Distinct Kite apps for staging vs prod.",
"domains\_dns": "Cloudflare DNS + certificates; force HTTPS; allow-list broker IPs where possible.",
"backup\_dr": "Nightly Postgres + ClickHouse snapshots to S3; RPO 24h, RTO 4h; runbooks to restore; config snapshots per run.",

"testing\_levels": \["unit","component","integration","contract","e2e","load","security"],
"test\_frameworks": "pytest + Hypothesis; Playwright for UI; Locust/k6 for load; Schemathesis for OpenAPI contract tests; Bandit + Semgrep for security; Testcontainers for ClickHouse/Postgres.",
"acceptance\_criteria": "Paper mode shows consistent P\&L and reconciled orders for 5 consecutive sessions with zero P0s; live mode respects all risk caps, squares off by 15:20 IST, and produces complete daily audit packs; backtests align with live within slippage tolerance.",
"lint\_format": "Ruff + Black (Python); ESLint + Prettier (TS); Commitlint with Conventional Commits.",
"code\_coverage\_target": "80% global; 90% for risk & broker adapters",

"repo\_host": "github\_private",
"branching\_model": "trunk\_based",
"pr\_policy": "Require 1 reviewer for docs/config, 2 for code touching risk/broker; required checks: lint, typecheck, unit, integration; squash merges; Conventional Commits; CODEOWNERS on risk/broker modules.",
"versioning\_release": "semver\_automated",
"license": "proprietary",
"documentation": "Top-level README (quickstart, env, OTP flow). /docs as Docusaurus site: architecture, strategy SDK, risk matrix, runbooks, API (OpenAPI), troubleshooting, FAQ.",

"domain\_model\_details": "Invariants: (1) At most one open position per instrument per product; (2) Every order links to an intent and a run/config snapshot; (3) Risk gates must pass before any broker call; (4) All times dual-stamped (UTC + IST); (5) Square-off by cutoff regardless of state. Lifecycles: Signal→Intent→(Risk OK)→Order→(Postbacks)→Fills→Position updates→Audit. Workflows: market open bootstrap; recover/resume; daily pack generation.",
"architecture\_style": \["hexagonal/ports\_adapters","event\_driven","plugin\_arch","modular\_monolith"],
"error\_handling": "Global exception mapper; retries with exponential backoff + jitter; circuit breakers on broker and WS; poison-queue for irrecoverable messages; graceful shutdown flattens positions.",
"feature\_flags": true,
"migrations\_plan": "Alembic migrations; zero-downtime via online schema changes; backfills in batches with progress markers; shadow tables for large rewrites.",
"import\_export": "CSV/Parquet import for research data; JSONL export of signals/orders/fills; daily ZIP of audit pack.",
"analytics": "Operational analytics (events): tick\_ingest\_gap, postback\_delay, risk\_breach\_blocked, order\_retry, pnl\_1m; stored in ClickHouse for fast slices.",

"domain\_constraints": "Operate strictly within NSE cash intraday (MIS); comply with broker T\&Cs and SEBI retail-algo framework; OTP-based login flow; respect broker API rate limits and order/modify caps; no redistribution of market data; personal, single-user scope.",
"top\_risks": "- Broker/API changes or throttling → Mitigation: versioned adapters, token-bucket, shadow testing.\n- Model overfitting → Walk-forward, meta-labeling, live canaries.\n- Data quality (ticks, corporate actions) → Dual sources where possible, validations, anomaly alerts.\n- Regulatory shifts → Configurable controls, auditability, disable switch.\n- Operational incidents (WS drops, partial fills) → Reconnect strategies, reconciliation jobs, runbooks.",
"availability\_slo": "99.5% during market hours; graceful degradation to paper mode if broker unavailable.",

"team\_roles": "You (Owner/Trader); 1 Backend/ML engineer; 1 SRE-ish generalist (part-time); me (GPT-5) as planning/coding copilot.",
"stakeholders": "Owner (you) approves releases; optional: broker compliance sign-off before live.",
"communication": "Slack channel for alerts & deploys; weekly review email with KPIs and incidents.",

"sample\_accounts": true,
"dev\_containers": "VS Code Dev Containers with Python 3.11 + Node 20; preinstalled CLI tools (poetry, pnpm); Makefile wrappers.",
"make\_targets\_scripts": "make bootstrap, make up, make down, make seed, make test, make lint, make format, make backtest, make paper, make live, make daily-pack",

"files\_links": "See detailed E2E spec in canvas for architecture/configs; broker API docs via your Zerodha dashboard.",
"open\_questions": "- Preferred cloud target (AWS ECS vs DO droplet vs local)?\n- Which initial strategy to ship first (microstructure momentum vs VWAP mean-reversion)?\n- Are you comfortable auto-placing MARKET on square-off if LIMITs aren’t filled?\n- Any symbols to blacklist/whitelist to start?\n- Do you require manual ACK before first real order each session?"
}
